<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[不可知之地]]></title>
  <link href="http://oncoding.in/atom.xml" rel="self"/>
  <link href="http://oncoding.in/"/>
  <updated>2012-12-14T11:33:26+08:00</updated>
  <id>http://oncoding.in/</id>
  <author>
    <name><![CDATA[子不语]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[『算法』读书笔记之数据抽象]]></title>
    <link href="http://oncoding.in/blog/2012/12/13/algorithms-data-abstraction/"/>
    <updated>2012-12-13T23:56:00+08:00</updated>
    <id>http://oncoding.in/blog/2012/12/13/algorithms-data-abstraction</id>
    <content type="html"><![CDATA[<p>这是学习《算法》1.2时所做的读书笔记，这一节阐述了数据抽象的基本概念以及Java是如何实现数据抽象的。</p>

<h2>大纲</h2>

<p>本节重要知识点如下所示。</p>

<p><img src="http://oncoding.in/images/blog/dataAbstraction.png"></p>

<!-- more -->


<h4>重点</h4>

<ul>
<li>原始数据类型和封装类型的区别</li>
<li>使用对象时，使用的是其引用。 对象可以理解为电视机， 而引用则是遥控器。</li>
<li>注意理解优先设计API的好处以及如何进行良好的API设计。不存在理想化的API设计，即说明书问题。</li>
<li>从更高的抽象层次理解Java语言的设计哲学</li>
</ul>


<h4>存疑</h4>

<ul>
<li>“内存管理”小节中所举的例子， “there is no longer a reference to the Date object that was created
and used to initialize b.” 是否应该是a呢？</li>
</ul>


<h2>代码实例</h2>

<p>本小节并未涉及具体的算法， 主要还是介绍Java的基础语法， 我觉得并没有必要进行摘录。</p>

<h2>练习</h2>

<p>明天再做吧。</p>

<p>未完待续。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『算法』读书笔记之基础编程模型]]></title>
    <link href="http://oncoding.in/blog/2012/12/09/algorithms-basic-programming-model/"/>
    <updated>2012-12-09T18:35:00+08:00</updated>
    <id>http://oncoding.in/blog/2012/12/09/algorithms-basic-programming-model</id>
    <content type="html"><![CDATA[<p>这是学习《算法》1.1时所做的读书笔记，这一节简单介绍了本书所用到的基础编程模型 ，即Java语言的一个子集。</p>

<h2>大纲</h2>

<p>本节重要知识点如下所示。</p>

<p><img src="http://oncoding.in/images/blog/basicProgrammingModel.png"></p>

<!-- more -->


<h2>代码实例</h2>

<p>本小节简单实现了二分搜索，有递归和非递归两种实现方式。</p>

<figure class='code'><figcaption><span>递归实现二分搜索 (RecursionBinarySearch.java)</span> <a href='http://oncoding.in/downloads/code/ch01/RecursionBinarySearch.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nf">RecursionBinarySearch</span><span class="o">(){</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">rank</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="n">in</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">lo</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">hi</span><span class="o">){</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">]){</span>
</span><span class='line'>              <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">]){</span>
</span><span class='line'>              <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span><span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">mid</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>普通方式实现二分搜索 (BinarySearch.java)</span> <a href='http://oncoding.in/downloads/code/ch01/BinarySearch.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinarySearch</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">rank</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">ranke</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="kt">void</span> <span class="nf">rank</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lo</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hi</span><span class="o">){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">lo</span> <span class="o">&gt;</span> <span class="n">hi</span><span class="o">){</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">]){</span>
</span><span class='line'>          <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="n">rank</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">lo</span><span class="o">,</span> <span class="n">hi</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">]){</span>
</span><span class='line'>          <span class="n">lo</span> <span class="o">=</span>  <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="n">rank</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">lo</span><span class="o">,</span> <span class="n">hi</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span><span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">mid</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>练习</h2>

<ol>
<li>编写一段代码，讲一个正整数N用二进制表示并转换为一个String类型的值s。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toBinaryString</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">){</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">N</span><span class="o">;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">n</span> <span class="o">/=</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>未完待续。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『算法』读书笔记之那就开始吧]]></title>
    <link href="http://oncoding.in/blog/2012/12/09/algorithms-get-started/"/>
    <updated>2012-12-09T15:22:00+08:00</updated>
    <id>http://oncoding.in/blog/2012/12/09/algorithms-get-started</id>
    <content type="html"><![CDATA[<p><img src="http://oncoding.in/images/blog/algorithms.png"></p>

<p>刚刚收到了<a href="http://book.douban.com/subject/19952400/">《算法(第四版)》</a>中文版，谢谢<a href="https://github.com/JeffreyZhao/ssp">老赵和SSP</a>的资助。其实几个月以前就买了《算法（第四版）》的英文版，一方面事情多，另一方面高估了自己的英文阅读速度，以至于进度甚是缓慢。现在有了中文版，希望能在两个月以内把纠结了很久的算法入门搞定。</p>

<!-- more -->


<h2>环境搭建</h2>

<h4>编程</h4>

<p>《算法》一书中的所有算法都是基于Java的一个子集实现的，并没有使用太多的API；多数算法的代码也并不长，所以我觉得就没有必要使用IDE了。使用vim + javac足矣，正好也可以熟练一下vim的使用。本来想用Sublime Text的，结果这货在Ubuntu下不能输入中文，不给力啊。</p>

<h4>博客</h4>

<p>如你所见，我用基于Rails的Octopress在Github上了搭了这个博客:</p>

<ul>
<li>不限流量，速度尚可；</li>
<li>贴代码很方便；</li>
<li>支持Markdown（ReText还是很好用的）。</li>
</ul>


<h4>思维导图</h4>

<p>一图胜千言，利用思维导图可以更好的书写读书笔记。Ubuntu下XMind表现十分出色。</p>

<h2>进度安排</h2>

<p>最近除了复习托福、准备APS审核，基本没有其他事情，应该可以专心看书。《算法》一书一共六章，25个小节，按两天一小节计算，大概需要两个月的时间。</p>

<p>读书笔记方面，老赵要求最好能一周一篇。我觉得还是看阅读进度吧，开始几天可能多发一点，毕竟已经拿英文版读过一些了，后面进度或许有点慢，不过还是尽量保证一周一篇吧。</p>

<p>- -EOF- -</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery学习笔记之jQuery基础篇]]></title>
    <link href="http://oncoding.in/blog/2012/06/06/jqueryxue-xi-bi-ji-zhi-jqueryji-chu-pian/"/>
    <updated>2012-06-06T18:09:00+08:00</updated>
    <id>http://oncoding.in/blog/2012/06/06/jqueryxue-xi-bi-ji-zhi-jqueryji-chu-pian</id>
    <content type="html"><![CDATA[<p>jQuery是目前最实用的JavaScript库，号称前端开发的利器，能大大简化开发，很有必要学习。这篇文章，是我通过阅读《<a href="http://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html">jQuery基本原理</a>》来了解jQuery时所做的读书笔记：只记重点，概括思想，以作备忘。</p>

<p>部分内容参考了阮一峰先生的博文<a href="http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html">《jQuery设计思想》</a>。如果想了解JavaScript的一些基础知识，请参看我的上一篇读书笔记<a href="http://oncoding.in/blog/2012/06/05/jqueryxue-xi-bi-ji-zhi-javascriptji-chu-yu-fa-pian/">《jQuery学习笔记之JavaScript基础语法篇》</a></p>

<h2>jQuery基础</h2>

<p>这一部分主要记录jQuery的基础知识。</p>

<h2>ready：一切的前提</h2>

<p>ready可以用来判断当前页面是否已经加载完毕</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//常规写法</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//精简写法</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;ready!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->




<figure class='code'><figcaption><span>指定某函数在页面加载完毕后执行</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">readyFn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;run when page is ready.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="nx">readyFn</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>选择元素：最基础的功能</h2>

<p>使用jQuery的第一步，往往就是将一个选择表达式，放进构造函数jQuery()（<strong>简写为$</strong>），然后得到被选中的元素。jQuery支持大部分的CSS3选择器，完整的列表请参考<a href="http://api.jquery.com/category/selectors/">jQuery官方API</a></p>

<h4>如何选择元素</h4>

<figure class='code'><figcaption><span>最常用的选择表达式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//选择整个文档对象</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//选择ID为myId的网页元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myId&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//选择class为myClass的div元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.myClass&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//选择name属性为first_name的input元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=first_name]&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>jQuery特殊的选择表达式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a:first&#39;</span><span class="p">)</span> <span class="c1">//选择网页中第一个a元素</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;tr:odd&#39;</span><span class="p">)</span> <span class="c1">//选择表格的奇数行</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myForm :input&#39;</span><span class="p">)</span> <span class="c1">// 选择表单中的input元素</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:visible&#39;</span><span class="p">)</span> <span class="c1">//选择可见的div元素</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:gt(2)&#39;</span><span class="p">)</span> <span class="c1">// 选择所有的div元素，除了前三个</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div:animated&#39;</span><span class="p">)</span> <span class="c1">// 选择当前处于动画状态的div元素</span>
</span></code></pre></td></tr></table></div></figure>


<h4>判断选择元素的操作是否成功</h4>

<p>使用 $() 指定一个选择器，将会返回一个对象。即使选择器没有包含任何元素，该对象的值也为true。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.foo&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//不管$(&#39;div.foo&#39;)的操作是否成功，此处的代码都会被执行 </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正确的做法：测试返回对象的长度属性</p>

<figure class='code'><figcaption><span>测试选择器是否包含多个元素</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.foo&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>在变量中保存选择器</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">$divs</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：当 DOM 改变时被保存的选择器不会自动更新。</p>

<h4>筛选结果集</h4>

<p>jQuery提供了各种强大的过滤器，对结果集进行筛选，缩小选择结果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span> <span class="c1">// 选择包含p元素的div元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">not</span><span class="p">(</span><span class="s1">&#39;.myClass&#39;</span><span class="p">);</span> <span class="c1">//选择class不等于myClass的div元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;.myClass&#39;</span><span class="p">);</span> <span class="c1">//选择class等于myClass的div元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">first</span><span class="p">();</span> <span class="c1">//选择第1个div元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">//选择第6个div元素</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>同时，jQuery还提供了在DOM树上移动的功能</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span> <span class="c1">//选择div元素后面的第一个p元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">parent</span><span class="p">();</span> <span class="c1">//选择div元素的父元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">);</span> <span class="c1">//选择离div最近的那个form父元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">();</span> <span class="c1">//选择div的所有子元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">siblings</span><span class="p">();</span> <span class="c1">//选择div的同级元素</span>
</span></code></pre></td></tr></table></div></figure>


<h2>操作元素</h2>

<p>在成功选择元素后，jQuery支持对其进行一系列的操作</p>

<h4>链式操作</h4>

<p>选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来
。另外，jQuery还提供了.end()方法，使得结果集可以后退一步</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#content&#39;</span><span class="p">)</span>   <span class="c1">//找到class为content的元素</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">)</span> <span class="c1">//选择所有的h3元素</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">//选择第三个h3元素</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;new text for the third h3!&#39;</span><span class="p">)</span> <span class="c1">//将它的内容改为</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">()</span> <span class="c1">// 恢复选择器到 #content 中的所有 h3 部分 </span>
</span><span class='line'>    <span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;new text for the first h3!&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：大量的链式处理会给代码的修改和调试带来困难。</p>

<h4>Getters &amp; Setters</h4>

<p>Getters &amp; Setters“重载”了同一个函数，根据参数列表确定最终的操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span> <span class="c1">//html()没有参数，表示取出h1的值</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>   <span class="c1">//html()有参数hello，表示对h1进行赋值  </span>
</span></code></pre></td></tr></table></div></figure>


<p>常见的Getters &amp; Setters函数：</p>

<ul>
<li>.html() html内容</li>
<li>.text() text内容</li>
<li>.attr() 某个属性的值</li>
<li>.width() 某个元素的宽度</li>
<li>.height() 某个元素的高度</li>
<li>.val() 表单元素的值</li>
</ul>


<p><strong>注意</strong>：如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值；取值的时候，则是只取出第一个元素的值（.text()例外，它取出所有元素的text内容）。</p>

<h4>移动元素</h4>

<p>假定我们选中了一个div元素，需要把它移动到p元素后面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//第一种方法是使用.insertAfter()，把div元素移动p元素后面：</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">insertAfter</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//第二种方法是使用.after()，把p元素加到div元素前面：</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>两种操作的<strong>区别</strong>：返回的元素不一样。第一种方法返回div元素，第二种方法返回p元素。你可以根据需要，选择到底使用哪一种方法。</p>

<p>使用这种模式的操作方法，一共有四对：</p>

<ul>
<li>.insertAfter()和.after()：在现存元素的外部，从后面插入元素</li>
<li>.insertBefore()和.before()：在现存元素的外部，从前面插入元素</li>
<li>.appendTo()和.append()：在现存元素的内部，从后面插入元素</li>
<li>.prependTo()和.prepend()：在现存元素的内部，从前面插入元素</li>
</ul>


<figure class='code'><figcaption><span>使用appendTo()函数实现元素的移动</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 将第一个列表项作为最后一项 </span>
</span><span class='line'><span class="kd">var</span> <span class="nx">$li</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myList li:first&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;#myList&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 同一问题的另一种处理</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myList&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myList li:first&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h4>拷贝元素</h4>

<p>在调用元素的移动函数之前，调用clone()函数即可。</p>

<h4>删除元素</h4>

<p>使用.remove()和.detach()函数可以实现。两者的区别在于，前者不保留被删除元素的事件，后者保留，有利于重新插入文档时使用。
清空元素内容（但是不删除该元素）使用.empty()。</p>

<h4>新建元素</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//创建新元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;This is a new paragraph&lt;/p&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;li class=&quot;new&quot;&gt;new list item&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//创建一个包含属性对象的新元素</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;a/&gt;&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">html</span> <span class="o">:</span> <span class="s1">&#39;This is a &lt;strong&gt;new&lt;/strong&gt; link&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;class&#39;</span> <span class="o">:</span> <span class="s1">&#39;new&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">href</span> <span class="o">:</span> <span class="s1">&#39;foo.html&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个新元素被创建之后，它<strong>不会</strong>立刻被添加到页面中去，需要调用一次appendTo()函数。</p>

<figure class='code'><figcaption><span>添加新元素的完整示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">$myNewElement</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;New element&lt;/p&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$myNewElement</span><span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;#content&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，需要添加多个新元素时，最好将其存储到数组中，再一次性的append。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myItems</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">$myList</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#myList&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">myItems</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;item &#39;</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$myList</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">myItems</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>工具方法</h2>

<p>jQuery提供了许多有用的工具方法，这些方法不需要选取元素就可以调用。</p>

<figure class='code'><figcaption><span>$.trim()去除行间和末尾的空白。</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="s1">&#39;    大量额外空白    &#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 返回 &#39;大量额外空白&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>$.each()在数组和对象上迭代。</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">([</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span> <span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;element &#39;</span> <span class="o">+</span> <span class="nx">idx</span> <span class="o">+</span> <span class="s1">&#39;is &#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">({</span> <span class="nx">foo</span> <span class="o">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="nx">baz</span> <span class="o">:</span> <span class="s1">&#39;bim&#39;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">k</span> <span class="o">+</span> <span class="s1">&#39; : &#39;</span> <span class="o">+</span> <span class="nx">v</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p> $.fn.each，也可用于在一个选择的元素中进行迭代。</p>

<figure class='code'><figcaption><span>$.inArray()在数组中返回值索引，如果值不在数组中就为 -1 。</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="nx">myArray</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;found it!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>$.extend() 使用后面对象的属性改变第一个对象的属性。</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">firstObject</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span> <span class="o">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="nx">a</span> <span class="o">:</span> <span class="s1">&#39;b&#39;</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">secondObject</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span> <span class="o">:</span> <span class="s1">&#39;baz&#39;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">firstObject</span><span class="p">,</span> <span class="nx">secondObject</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstObject</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// &#39;baz&#39;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newObject</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>   <span class="c1">// &#39;baz&#39;</span>
</span><span class='line'><span class="c1">//如果你不打算改变任何对象你可传递 $.extend，作为第一个参数传递一个空对象。</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">firstObject</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span> <span class="o">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="nx">a</span> <span class="o">:</span> <span class="s1">&#39;b&#39;</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">secondObject</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span> <span class="o">:</span> <span class="s1">&#39;baz&#39;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">newObject</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">firstObject</span><span class="p">,</span> <span class="nx">secondObject</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstObject</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// &#39;bar&#39;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newObject</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>   <span class="c1">// &#39;baz&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>$.proxy()返回一个函数它总是运行在一个提供的作用域里 — 就是说，this 的设置意味着内部传递函数到第二个参数。</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span> <span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myFunction</span><span class="p">();</span> <span class="c1">// 记录 window 对象</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">myProxyFunction</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="nx">myFunction</span><span class="p">,</span> <span class="nx">myObject</span><span class="p">);</span>
</span><span class='line'><span class="nx">myProxyFunction</span><span class="p">();</span> <span class="c1">// 记录 myObject 对象</span>
</span><span class='line'><span class="c1">//如果你拥有一个带方法的对象，你能传递对象和方法名去返回一个总运行在对象作用域里的函数。</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">myFn</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#foo&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">myObject</span><span class="p">.</span><span class="nx">myFn</span><span class="p">);</span> <span class="c1">// 记录 DOM 元素 #foo</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#foo&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="nx">myObject</span><span class="p">,</span> <span class="s1">&#39;myFn&#39;</span><span class="p">));</span> <span class="c1">// 记录 myObject</span>
</span></code></pre></td></tr></table></div></figure>


<h2>事件操作</h2>

<p>曾经有一段时间，在浏览器中处理事件十分的混乱，导致API各不相同，缺少一致性。jQuery提供了一个统一的API消除了浏览器之间的差异。</p>

<h4>绑定事件</h4>

<p>jQuery支持把事件直接绑定在元素上，可以使用bind()函数同时传入事件类型和回调函数作为参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span>
</span><span class='line'><span class="err">　　　　</span><span class="s1">&#39;click change&#39;</span><span class="p">,</span> <span class="c1">//同时绑定click和change事件</span>
</span><span class='line'><span class="err">　　　　</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="err">　　　　　　</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span>
</span><span class='line'><span class="err">　　　　</span><span class="p">}</span>
</span><span class='line'><span class="err">　　</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>jQuery为常用事件提供一些快捷方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="err">　　</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>只想让绑定的事件执行一次</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;You just clicked this for the first time!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;You have clicked this before!&#39;</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果希望只在某个元素第一次被点击的时候做一些复杂的初始化， $.fn.one方法是很好的选择。</p>

<h4>事件对象</h4>

<p>所有的事件处理函数，都可以接受一个事件对象（event object）作为参数，比如下面例子中的e：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">　　</span><span class="nx">alert</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span> <span class="c1">// &quot;click&quot;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个事件对象有一些很有用的属性和方法：</p>

<ul>
<li>event.pageX 事件发生时，鼠标距离网页左上角的水平距离</li>
<li>event.pageY 事件发生时，鼠标距离网页左上角的垂直距离</li>
<li>event.type 事件的类型（比如click）</li>
<li>event.which 按下了哪一个键</li>
<li>event.data 在事件对象上绑定数据，然后传入事件处理函数</li>
<li>event.target 事件针对的网页元素</li>
<li>event.preventDefault() 阻止事件的默认行为（比如点击链接，会自动打开新页面）</li>
<li>event.stopPropagation() 停止事件向上层元素冒泡</li>
</ul>


<p>在事件处理函数中，可以用this关键字，返回事件针对的DOM元素：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="err">　　　　</span><span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="s1">&#39;evil&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="c1">//如果确认为有害链接</span>
</span><span class='line'><span class="err">　　　　　　</span><span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> <span class="c1">//阻止打开</span>
</span><span class='line'><span class="err">　　　　　　</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;evil&#39;</span><span class="p">);</span> <span class="c1">//加上表示有害的class</span>
</span><span class='line'><span class="err">　　　　</span><span class="p">}</span>
</span><span class='line'><span class="err">　　</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>回调函数中的上下文this会发生改变</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.clicky&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//this指向事件的目标对象</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;.clicky&quot;</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中一个解决办法是在进入回调函数前，将上下文保存在一个局部变量中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.clicky&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">clickedClick</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一种方法是使用代理函数将回调函数包装起来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.clicky&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">proxy</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//上下文不会改变</span>
</span><span class='line'><span class="p">},</span> <span class="k">this</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h4>支持事件列表</h4>

<ul>
<li>.blur() 表单元素失去焦点。</li>
<li>.change() 表单元素的值发生变化</li>
<li>.click() 鼠标单击</li>
<li>.dblclick() 鼠标双击</li>
<li>.focus() 表单元素获得焦点</li>
<li>.focusin() 子元素获得焦点</li>
<li>.focusout() 子元素失去焦点</li>
<li>.hover() 同时为mouseenter和mouseleave事件指定处理函数</li>
<li>.keydown() 按下键盘（长时间按键，只返回一个事件）</li>
<li>.keypress() 按下键盘（长时间按键，将返回多个事件）</li>
<li>.keyup() 松开键盘</li>
<li>.load() 元素加载完毕</li>
<li>.mousedown() 按下鼠标</li>
<li>.mouseenter() 鼠标进入（进入子元素不触发）</li>
<li>.mouseleave() 鼠标离开（离开子元素不触发）</li>
<li>.mousemove() 鼠标在元素内部移动</li>
<li>.mouseout() 鼠标离开（离开子元素也触发）</li>
<li>.mouseover() 鼠标进入（进入子元素也触发）</li>
<li>.mouseup() 松开鼠标</li>
<li>.ready() DOM加载完成</li>
<li>.resize() 浏览器窗口的大小发生改变</li>
<li>.scroll() 滚动条的位置发生变化</li>
<li>.select() 用户选中文本框中的内容</li>
<li>.submit() 用户递交表单</li>
<li>.toggle() 根据鼠标点击的次数，依次运行多个函数</li>
<li>.unload() 用户离开页面</li>
</ul>


<h4>解除绑定</h4>

<p>.unbind()用来解除事件绑定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery学习笔记之JavaScript基础语法篇]]></title>
    <link href="http://oncoding.in/blog/2012/06/05/jqueryxue-xi-bi-ji-zhi-javascriptji-chu-yu-fa-pian/"/>
    <updated>2012-06-05T23:29:00+08:00</updated>
    <id>http://oncoding.in/blog/2012/06/05/jqueryxue-xi-bi-ji-zhi-javascriptji-chu-yu-fa-pian</id>
    <content type="html"><![CDATA[<p>jQuery是目前最实用的JavaScript库，号称前端开发的利器，能大大简化开发，很有必要学习。这篇文章，是我通过阅读《<a href="http://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html">jQuery基本原理</a>》来了解jQuery时所做的读书笔记：只记重点，概括思想，以作备忘。</p>

<h2>JavaScript基础语法</h2>

<p>这一部分主要记录JavaScript的<em>非常见</em>基本语法，适合看完W3Shool中JavaScript简介的人。</p>

<h4>逻辑表达式</h4>

<p>或运算符（ ||） 返回第一个值为真的操作数, 如果两个操作数的值都为假，则返回最后一个操作数。</p>

<p>与运算符（ &amp;&amp;） 返回第一个值为假的运算符，如果两个操作数的值都为真，则返回最后一个操作数。</p>

<p>该特性可用于取代if进行流程控制，非常优雅</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 当foo的值为真的时候执行doSomething来处理foo</span>
</span><span class='line'><span class="nx">foo</span> <span class="o">&amp;&amp;</span> <span class="nx">doSomething</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果baz为真，则把baz的值赋给bar</span>
</span><span class='line'><span class="c1">// 否则bar的值为函数craetBar的返回值</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nx">baz</span> <span class="o">||</span> <span class="nx">createBar</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h4>何时为真&amp;&amp;何时为假</h4>

<figure class='code'><figcaption><span>被判断为true的值</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;0&#39;</span><span class="p">;</span> <span class="c1">//字符串0。</span>
</span><span class='line'><span class="s1">&#39;any string&#39;</span><span class="p">;</span><span class="c1">//任意字符串。</span>
</span><span class='line'><span class="p">[];</span>  <span class="c1">// 一个空数组。</span>
</span><span class='line'><span class="p">{};</span>  <span class="c1">// 一个空对象。</span>
</span><span class='line'><span class="mi">1</span><span class="p">;</span>   <span class="c1">// 不为0的数。</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>被判断为false的值</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="s1">&#39;&#39;</span><span class="p">;</span>  <span class="c1">// 一个空串。</span>
</span><span class='line'><span class="kc">NaN</span><span class="p">;</span> <span class="c1">// JavaScript中的 &quot;not-a-number&quot;（NaN是一个不确定的数）。 </span>
</span><span class='line'><span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="kc">undefined</span><span class="p">;</span>  <span class="c1">// 注意 -- undefined 可以被重新定义!</span>
</span></code></pre></td></tr></table></div></figure>


<h4>把字符串转换为数字</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="s1">&#39;2&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用Number对象的构造函数</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span> <span class="o">+</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">bar</span><span class="p">));</span>
</span><span class='line'><span class="c1">// 使用 + 进行强制类型转换</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span> <span class="o">+</span> <span class="o">+</span><span class="nx">bar</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>比较运算符</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">baz</span> <span class="o">=</span> <span class="s1">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bim</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span> <span class="o">==</span> <span class="nx">baz</span><span class="p">;</span> <span class="c1">//返回真</span>
</span><span class='line'><span class="nx">foo</span> <span class="o">===</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">baz</span><span class="p">);</span>   <span class="c1">// 返回真</span>
</span><span class='line'><span class="nx">bim</span> <span class="o">&gt;</span> <span class="nx">baz</span><span class="p">;</span>   <span class="c1">//返回真</span>
</span></code></pre></td></tr></table></div></figure>


<h4>三元运算符</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//如果bar为1，则foo值为1</span>
</span><span class='line'><span class="c1">//否则，foo的值为0</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nx">bar</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<h4>switch语句</h4>

<p>switch语句支持值为字符串。在JavaScript中很少使用switch语句，通过创建对象来实现更好。我没懂为什么更好，搜到挺有意思的文章，<a href="http://zhangjunhd.blog.51cto.com/113473/68070/">“使用面向对象技术取代switch和if”</a>，改天看看，mark。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">stuffToDo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;bar&#39;</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;the value was bar -- yay!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="s1">&#39;baz&#39;</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;boo baz :(&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="s1">&#39;default&#39;</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;everything else is just ok&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">stuffToDo</span><span class="p">[</span><span class="nx">foo</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">stuffToDo</span><span class="p">[</span><span class="nx">foo</span><span class="p">]();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">stuffToDo</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">]();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>数组</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 获取测试数组长度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;world&#39;</span> <span class="p">];</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myArray</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>   <span class="c1">// logs 2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 加入元素到数组中</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;world&#39;</span> <span class="p">];</span>
</span><span class='line'><span class="nx">myArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;new&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 数组元素的切割与合并</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span> <span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myString</span> <span class="o">=</span> <span class="nx">myArray</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>   <span class="c1">// &#39;hello&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mySplit</span> <span class="o">=</span> <span class="nx">myString</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>  <span class="c1">// [ &#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39; ]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>函数</h4>

<h6>自执行匿名函数</h6>

<p>创建一个函数表述式然后立即执行函数，避免在代码中乱用全局命名空间</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;Hello world&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>   <span class="c1">// undefined!</span>
</span></code></pre></td></tr></table></div></figure>


<h6>函数作为参数</h6>

<figure class='code'><figcaption><span>以参数的方式传递一个匿名函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myFn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myFn</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;hello world&#39;</span><span class="p">;</span> <span class="p">});</span>   <span class="c1">// logs &#39;hello world&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>以参数的方式传递一个命名函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myFn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">myOtherFn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;hello world&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myFn</span><span class="p">(</span><span class="nx">myOtherFn</span><span class="p">);</span>   <span class="c1">// logs &#39;hello world&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>作用域</h4>

<p>声明变量时一定要加var关键字。否则，该变量被当做全局变量，即使该声明发生在函数内部</p>
]]></content>
  </entry>
  
</feed>
