<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SSP | 不可知之地]]></title>
  <link href="http://oncoding.in/blog/categories/ssp/atom.xml" rel="self"/>
  <link href="http://oncoding.in/"/>
  <updated>2012-12-14T11:27:49+08:00</updated>
  <id>http://oncoding.in/</id>
  <author>
    <name><![CDATA[子不语]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[『算法』读书笔记之数据抽象]]></title>
    <link href="http://oncoding.in/blog/2012/12/13/algorithms-data-abstraction/"/>
    <updated>2012-12-13T23:56:00+08:00</updated>
    <id>http://oncoding.in/blog/2012/12/13/algorithms-data-abstraction</id>
    <content type="html"><![CDATA[<p>这是学习《算法》1.2时所做的读书笔记，这一节阐述了数据抽象的基本概念以及Java是如何实现数据抽象的。</p>

<h2>大纲</h2>

<p>本节重要知识点如下所示。</p>

<p><img src="/images/blog/dataAbstraction.png"></p>

<h4>重点</h4>

<ul>
<li>原始数据类型和封装类型的区别</li>
<li>使用对象时，使用的是其引用。 对象可以理解为电视机， 而引用则是遥控器。</li>
<li>注意理解优先设计API的好处以及如何进行良好的API设计。不存在理想化的API设计，即说明书问题。</li>
<li>从更高的抽象层次理解Java语言的设计哲学</li>
</ul>


<h4>存疑</h4>

<ul>
<li>“内存管理”小节中所举的例子， “there is no longer a reference to the Date object that was created
and used to initialize b.” 是否应该是a呢？</li>
</ul>


<!-- more -->


<h2>代码实例</h2>

<p>本小节并未涉及具体的算法， 主要还是介绍Java的基础语法， 我觉得并没有必要进行摘录。</p>

<h2>练习</h2>

<p>明天再做吧。</p>

<p>未完待续。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『算法』读书笔记之基础编程模型]]></title>
    <link href="http://oncoding.in/blog/2012/12/09/algorithms-basic-programming-model/"/>
    <updated>2012-12-09T18:35:00+08:00</updated>
    <id>http://oncoding.in/blog/2012/12/09/algorithms-basic-programming-model</id>
    <content type="html"><![CDATA[<p>这是学习《算法》1.1时所做的读书笔记，这一节简单介绍了本书所用到的基础编程模型 ，即Java语言的一个子集。</p>

<h2>大纲</h2>

<p>本节重要知识点如下所示。</p>

<p><img src="/images/blog/basicProgrammingModel.png"></p>

<!-- more -->


<h2>代码实例</h2>

<p>本小节简单实现了二分搜索，有递归和非递归两种实现方式。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>递归实现二分搜索 (RecursionBinarySearch.java)</span> <a href='/downloads/code/ch01/RecursionBinarySearch.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nf">RecursionBinarySearch</span><span class="o">(){</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">rank</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="n">in</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
</span><span class='line'>		<span class="kt">int</span> <span class="n">lo</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>		<span class="kt">int</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">while</span><span class="o">(</span><span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">hi</span><span class="o">){</span>
</span><span class='line'>			<span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>			
</span><span class='line'>			<span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">]){</span>
</span><span class='line'>				<span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">]){</span>
</span><span class='line'>				<span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>			<span class="o">}</span> <span class="k">else</span><span class="o">{</span>
</span><span class='line'>				<span class="k">return</span> <span class="n">mid</span><span class="o">;</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>普通方式实现二分搜索 (BinarySearch.java)</span> <a href='/downloads/code/ch01/BinarySearch.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinarySearch</span><span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">rank</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
</span><span class='line'>		<span class="k">return</span> <span class="nf">ranke</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">int</span> <span class="kt">void</span> <span class="nf">rank</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lo</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hi</span><span class="o">){</span>
</span><span class='line'>		<span class="k">if</span><span class="o">(</span><span class="n">lo</span> <span class="o">&gt;</span> <span class="n">hi</span><span class="o">){</span>
</span><span class='line'>			<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>		<span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>		<span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">]){</span>
</span><span class='line'>			<span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>			<span class="n">rank</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">lo</span><span class="o">,</span> <span class="n">hi</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">]){</span>
</span><span class='line'>			<span class="n">lo</span> <span class="o">=</span>  <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>			<span class="n">rank</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">lo</span><span class="o">,</span> <span class="n">hi</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">else</span><span class="o">{</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">mid</span><span class="o">;</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>练习</h2>

<ol>
<li>编写一段代码，讲一个正整数N用二进制表示并转换为一个String类型的值s。</li>
</ol>


<p>``` java
public static String toBinaryString(int N){</p>

<pre><code>String s = "";
for(int n = N; n &gt; 0; n /= 2)
    s = (n % 2) + s;
</code></pre>

<p>}
```</p>

<p>未完待续。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『算法』读书笔记之那就开始吧]]></title>
    <link href="http://oncoding.in/blog/2012/12/09/algorithms-get-started/"/>
    <updated>2012-12-09T15:22:00+08:00</updated>
    <id>http://oncoding.in/blog/2012/12/09/algorithms-get-started</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/algorithms.png"></p>

<p>刚刚收到了<a href="http://book.douban.com/subject/19952400/">《算法(第四版)》</a>中文版，谢谢<a href="https://github.com/JeffreyZhao/ssp">老赵和SSP</a>的资助。其实几个月以前就买了《算法（第四版）》的英文版，一方面事情多，另一方面高估了自己的英文阅读速度，以至于进度甚是缓慢。现在有了中文版，希望能在两个月以内把纠结了很久的算法入门搞定。</p>

<!-- more -->


<h2>环境搭建</h2>

<h4>编程</h4>

<p>《算法》一书中的所有算法都是基于Java的一个子集实现的，并没有使用太多的API；多数算法的代码也并不长，所以我觉得就没有必要使用IDE了。使用vim + javac足矣，正好也可以熟练一下vim的使用。本来想用Sublime Text的，结果这货在Ubuntu下不能输入中文，不给力啊。</p>

<h4>博客</h4>

<p>如你所见，我用基于Rails的Octopress在Github上了搭了这个博客:</p>

<ul>
<li>不限流量，速度尚可；</li>
<li>贴代码很方便；</li>
<li>支持Markdown（ReText还是很好用的）。</li>
</ul>


<h4>思维导图</h4>

<p>一图胜千言，利用思维导图可以更好的书写读书笔记。Ubuntu下XMind表现十分出色。</p>

<h2>进度安排</h2>

<p>最近除了复习托福、准备APS审核，基本没有其他事情，应该可以专心看书。《算法》一书一共六章，25个小节，按两天一小节计算，大概需要两个月的时间。</p>

<p>读书笔记方面，老赵要求最好能一周一篇。我觉得还是看阅读进度吧，开始几天可能多发一点，毕竟已经拿英文版读过一些了，后面进度或许有点慢，不过还是尽量保证一周一篇吧。</p>

<p>- -EOF- -</p>
]]></content>
  </entry>
  
</feed>
